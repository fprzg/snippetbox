package main

import (
	"fmt"
	"html/template"
	"log"
	"net/http"
	"strconv"
)

func home(w http.ResponseWriter, r *http.Request) {
	if r.URL.Path != "/" {
		http.NotFound(w, r)
		return
	}

	files := []string{
	"./ui/html/base.tmpl",
	"./ui/html/pages/home.tmpl",
	"./ui/html/partials/nav.tmpl",
	"./ui/html/partials/block.tmpl",
	}

	ts, err := template.ParseFiles(files...)
	if err != nil {
		log.Println(err.Error())
		http.Error(w, "Internal Server Error", 500)
		return
	}

	err = ts.ExecuteTemplate(w, "base", nil)
	if err != nil {
		log.Println(err.Error())
		http.Error(w, "Internal Server Error", 500)
	}
}

func snippetView(w http.ResponseWriter, r *http.Request) {
	id, err := strconv.Atoi(r.URL.Query().Get("id"))
	if err != nil ||  id < 1 {
		http.NotFound(w, r)
	}

	//w.Write([]byte("Display a specific snippet..."))
	fmt.Fprintf(w, "Display a specific snippet with ID %d...", id)
}

func snippetCreate(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodPost {
	// solo podemos llamar a w.WriteHeader una vez por petici칩n. La segunda vez y dem치s resultar치n en una advertencia. Si no se llama, automaticamente se le asignar치  200 OK
		w.Header().Set("Allow", http.MethodPost)
		w.Header().Set("Content-Type", "application/json")
		//w.Write([]byte(`{ "name" : "Farid" } `))
		//w.Header().Set("Cache-Control", "public, max-age=31536000")
		//w.Header().Add("Cache-Control", "public")
		//w.Header().Set("Cache-Control", "max-age=31536000")
		//w.Header().Del("Cache-Control")
		//w.Header().Values("Cache-Control")
		//w.Header()["X-XSS-Protection"] = []string{"1; mode=block"}
		//w.Header()["Date"] = nil
		http.Error(w, "Method Not Allowed", http.StatusMethodNotAllowed)
		return
	}

	w.Write([]byte("Create a new snippet..."))
}
